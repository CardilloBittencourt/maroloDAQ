#include "maroloDAQ.h"
#include "ui_maroloDAQ.h"

#include <QMessageBox>
#include <QAction>
#include <unistd.h>
#include <stdlib.h>

maroloDAQ::maroloDAQ(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::maroloDAQ)
{
    findMaroloDAQ();
}

maroloDAQ::~maroloDAQ()
{
    delete ui;
}

void maroloDAQ::on_btnAppClose_clicked()
{
    exit(0);
}

void maroloDAQ::WriteData(const QByteArray data)
{
    procSerial->Write(data);
}

QString maroloDAQ::ReadData()
{
    QString data = procSerial->Read();
    //qDebug() << "ReadData - RX UART: " << data << endl;
    return data;
}

void maroloDAQ::findMaroloDAQ() {

    QString GetInfoHw;
    QStringList InfoHW;
    
    /* Create Object the Class QSerialPort*/
    devserial = new QSerialPort(this);
    
    /* Create Object the Class comserial to manipulate read/write of the my way */
    procSerial = new comserial(devserial);
    
    /* Load Device PortSerial available */
    QStringList DispSeriais = procSerial->CarregarDispositivos();
    
    int count = DispSeriais.count();
    bool ismarolo = false;
    QString newAction;
    
    if(DispSeriais.length() > 0) {
        
        for(int i=0;i<count;i++) {
                     
            if (!ismarolo) {
                
                /*
                 *    statusOpenSerial = procSerial->Conectar(ui->cbDevList->currentText(),
                 *                                            ui->cbDevBaudRate->currentText().toInt()
                 *                                            );
                 */
                
                /* Preciso melhorar isso para pegar o conteúdo dos submenus */
                procSerial->Conectar(DispSeriais[i],9600);
                
                /*
                 * aguardando a porta "aquecer" ;_(((
                 *
                 */
                sleep(2);
                
                /*
                 * Se conectou com sucesso no disposito serial
                 * Desabilito o botão Conectar e Sair
                 * Habilito Desconectar, Versao, Hardware e Ligar [F10]
                 */
                
                // * Enviando comando para obter informações do Device *
                WriteData("12\n");
                // * Recebendo as informações *
                GetInfoHw = ReadData();
                GetInfoHw = GetInfoHw.simplified();

                qDebug() << "GetInfoHw.size: " << GetInfoHw.size()  << endl;
                // * Confirmando se recebeu os dados *
                if( GetInfoHw.size() > 0 ) {
                    
                    
                    // * Ex: 4.3.2|UNO
                    //  * O que chegou pela serial foi adicionado na variavel GetInfoHW
                    //  * então acima removemos qualquer tabulação e abaixo um split
                    //  * baseado no caractere |, então sera quebrado em 2 posicoes
                    //  * 0 - 4.3.2
                    //  * 1 - UNO
                    //  *

                    InfoHW = GetInfoHw.split("|");

                    /*
                    for(int i=0;i<count;i++) {
                        newAction = DispSeriais[i];
                        ui->menuPortas->addAction("/dev/"+newAction);
                    }


                    // habilitando|desabilitando menus|actions
                    ui->btnAppClose->setEnabled(false);
                    ui->actionSair->setEnabled(false);
                    ui->actionConectar->setEnabled(false);
                    ui->actionDesconectar->setEnabled(true);
                    ui->actionRecarregar->setEnabled(false);

                    // Inserindo nos devidos Edits
                     ui->editDevCompiler->setText(InfoHW[0]);
                     ui->editDevModel->setText(InfoHW[1]);
                     //ui->menuPortas->addAction("[maroloDAQ] /dev/"+DispSeriais[i]);
*/
                    // escrevendo no terminal
                    ui->teLog->append("### Porta serial aberta com sucesso!");
                    
                    ismarolo = true;
                    qDebug() << "AQUI-2 findMarolo = " << "ismarolo = true" << endl;
                } // if( GetInfoHw.size() > 0 )
                else {
                    for(int i=0;i<count;i++) {
                        newAction = DispSeriais[i];
                        ui->menuPortas->addAction("/dev/"+newAction);
                    }
                    // habilitando|desabilitando menus|actions
                    ui->btnAppClose->setEnabled(true);
                    ui->actionSair->setEnabled(true);
                    ui->actionConectar->setEnabled(true);
                    ui->actionDesconectar->setEnabled(false);
                    ui->actionRecarregar->setEnabled(true);
                    /*
                     * QMessageBox messageBox;
                     * messageBox.critical(0,"Error","Nenhum Dispositivo maroloDAQ Encontrado !");
                     * messageBox.setText("Nenhum Dispositivo maroloDAQ Encontrado! Tente de Novo!");
                     * messageBox.exec();
                     * messageBox.setFixedSize(500,200);
                     */
                    
                    ui->teLog->append("### Erro ao obter informações do maroloDAQ, tente novamente.");
                }
            } // if (!ismarolo)
        } // for(int i=0;i<count;i++)
    } // if(DispSeriais.length() > 0)
    else {
        for(int i=0;i<count;i++) {
            newAction = DispSeriais[i];
            ui->menuPortas->addAction("/dev/"+newAction);
        }
        // habilitando|desabilitando menus|actions
        ui->btnAppClose->setEnabled(true);
        ui->actionSair->setEnabled(true);
        ui->actionConectar->setEnabled(true);
        ui->actionDesconectar->setEnabled(false);
        ui->actionRecarregar->setEnabled(true);
        ui->teLog->append("### Nenhuma porta serial foi detectada!");        
    } 

} // end findMaroloDAQ

void maroloDAQ::maroloDevClose()
{

    qDebug() << "AQUI-2 maroloDevClose = " << "TESTE" << endl;

    bool statusCloseSerial;

    statusCloseSerial = procSerial->Desconectar();

    
     // Descontando a porta serial com sucesso
     // Desabilito os botões Versao, Desconectar, Hardware, Ligar [F10]
     // Habilito Sair e Conectar
     
    if (statusCloseSerial) {
        // habilitando|desabilitando menus|actions
        //ui->btnDevClose->setEnabled(false);
        //ui->btnDevOpen->setEnabled(true);
        ui->btnAppClose->setEnabled(true);
        ui->actionSair->setEnabled(true);
        ui->actionConectar->setEnabled(true);
        ui->actionDesconectar->setEnabled(false);
        ui->actionRecarregar->setEnabled(false);

        ui->btnCalibrarSensor->setEnabled(false);
        ui->btnIniciar->setEnabled(false);
        ui->btnParar->setEnabled(false);

        ui->editDevCompiler->clear();
        ui->editDevModel->clear();
        
        ui->teLog->append("### Porta serial fechada com sucesso!");
    }
    else {
        ui->teLog->append("### Falha ao fechar conexão serial.");
    }
}

void maroloDAQ::on_btnCalibrarSensor_clicked()
{

}

void maroloDAQ::on_btnBWTerminal_clicked()
{
    QPalette paleta;
    /*
     * Verifica se PaletaBW é True ou False
     * Se True: Fundo Preto, Fonte Branco
     * Se False: Fundo Branco, Fonte Preto
     */

    if(PaletaLogBW) {
        paleta.setColor(QPalette::Base,Qt::black);
        paleta.setColor(QPalette::Text,Qt::white);
        ui->teLog->setPalette(paleta);
        PaletaLogBW=false;
    }
    else {
        paleta.setColor(QPalette::Base,Qt::white);
        paleta.setColor(QPalette::Text,Qt::black);
        ui->teLog->setPalette(paleta);
        PaletaLogBW=true;
    }
}


void maroloDAQ::on_btnDevOpen_clicked()
{
    findMaroloDAQ();
}

void maroloDAQ::on_btnDevClose_clicked()
{
    maroloDevClose();
}

void maroloDAQ::on_btnParar_clicked()
{

}

void maroloDAQ::on_btnIniciar_clicked()
{

}


void maroloDAQ::on_actionSalvar_como_triggered()
{

}

void maroloDAQ::on_actionSalvar_triggered()
{

}

void maroloDAQ::on_actionSair_triggered()
{
    exit(0);
}

void maroloDAQ::on_actionConectar_triggered()
{
    
    ui->editDevCompiler->clear();
    ui->editDevModel->clear();
    findMaroloDAQ();
}

void maroloDAQ::on_actionDesconectar_triggered()
{
    findMaroloDAQ();
}

void maroloDAQ::on_actionSobre_triggered()
{
    ui->teLog->append("### AQUI on_actionSobre_triggered().");
}

void maroloDAQ::on_actionRecarregar_triggered()
{
    findMaroloDAQ();
}
